/*
 * APS API (Formly Forge API)
 *
 * APS API based on https://aps.autodesk.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ApsNET.Client;
using ApsNET.Model;

namespace ApsNET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwoLeggedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret.
        /// </summary>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <returns>Bearer</returns>
        Bearer AuthenticationV1AuthenticatePost(string clientId, string clientSecret, string grantType, string scopes = default(string));

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <returns>ApiResponse of Bearer</returns>
        ApiResponse<Bearer> AuthenticationV1AuthenticatePostWithHttpInfo(string clientId, string clientSecret, string grantType, string scopes = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwoLeggedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Bearer</returns>
        System.Threading.Tasks.Task<Bearer> AuthenticationV1AuthenticatePostAsync(string clientId, string clientSecret, string grantType, string scopes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bearer>> AuthenticationV1AuthenticatePostWithHttpInfoAsync(string clientId, string clientSecret, string grantType, string scopes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwoLeggedApi : ITwoLeggedApiSync, ITwoLeggedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwoLeggedApi : ITwoLeggedApi
    {
        private ApsNET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoLeggedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwoLeggedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoLeggedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwoLeggedApi(String basePath)
        {
            this.Configuration = ApsNET.Client.Configuration.MergeConfigurations(
                ApsNET.Client.GlobalConfiguration.Instance,
                new ApsNET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ApsNET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApsNET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ApsNET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoLeggedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwoLeggedApi(ApsNET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApsNET.Client.Configuration.MergeConfigurations(
                ApsNET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApsNET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApsNET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ApsNET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoLeggedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TwoLeggedApi(ApsNET.Client.ISynchronousClient client, ApsNET.Client.IAsynchronousClient asyncClient, ApsNET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApsNET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApsNET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApsNET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApsNET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApsNET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret. 
        /// </summary>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <returns>Bearer</returns>
        public Bearer AuthenticationV1AuthenticatePost(string clientId, string clientSecret, string grantType, string scopes = default(string))
        {
            ApsNET.Client.ApiResponse<Bearer> localVarResponse = AuthenticationV1AuthenticatePostWithHttpInfo(clientId, clientSecret, grantType, scopes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret. 
        /// </summary>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <returns>ApiResponse of Bearer</returns>
        public ApsNET.Client.ApiResponse<Bearer> AuthenticationV1AuthenticatePostWithHttpInfo(string clientId, string clientSecret, string grantType, string scopes = default(string))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'clientId' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");

            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'grantType' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");

            ApsNET.Client.RequestOptions localVarRequestOptions = new ApsNET.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ApsNET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApsNET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("client_id", ApsNET.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            localVarRequestOptions.FormParameters.Add("client_secret", ApsNET.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            localVarRequestOptions.FormParameters.Add("grant_type", ApsNET.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (scopes != null)
            {
                localVarRequestOptions.FormParameters.Add("scopes", ApsNET.Client.ClientUtils.ParameterToString(scopes)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Bearer>("/authentication/v1/authenticate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationV1AuthenticatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret. 
        /// </summary>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Bearer</returns>
        public async System.Threading.Tasks.Task<Bearer> AuthenticationV1AuthenticatePostAsync(string clientId, string clientSecret, string grantType, string scopes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApsNET.Client.ApiResponse<Bearer> localVarResponse = await AuthenticationV1AuthenticatePostWithHttpInfoAsync(clientId, clientSecret, grantType, scopes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a two-legged access token by providing your app’s client ID and secret. 
        /// </summary>
        /// <exception cref="ApsNET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the app</param>
        /// <param name="clientSecret">Client secret of the app</param>
        /// <param name="grantType">Must be client_credentials</param>
        /// <param name="scopes">Space-separated list of required scopes Note: A URL-encoded space is %20. * See the [Scopes](https://aps.autodesk.com/en/docs/oauth/v1/overview/scopes) page for more information on when scopes are required.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Bearer)</returns>
        public async System.Threading.Tasks.Task<ApsNET.Client.ApiResponse<Bearer>> AuthenticationV1AuthenticatePostWithHttpInfoAsync(string clientId, string clientSecret, string grantType, string scopes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'clientId' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");

            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApsNET.Client.ApiException(400, "Missing required parameter 'grantType' when calling TwoLeggedApi->AuthenticationV1AuthenticatePost");


            ApsNET.Client.RequestOptions localVarRequestOptions = new ApsNET.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ApsNET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApsNET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("client_id", ApsNET.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            localVarRequestOptions.FormParameters.Add("client_secret", ApsNET.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            localVarRequestOptions.FormParameters.Add("grant_type", ApsNET.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (scopes != null)
            {
                localVarRequestOptions.FormParameters.Add("scopes", ApsNET.Client.ClientUtils.ParameterToString(scopes)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Bearer>("/authentication/v1/authenticate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationV1AuthenticatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
